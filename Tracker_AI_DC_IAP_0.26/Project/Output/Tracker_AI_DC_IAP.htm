<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Output\Tracker_AI_DC_IAP.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Output\Tracker_AI_DC_IAP.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Jun 02 09:41:58 2020
<BR><P>
<H3>Maximum Stack Usage =        384 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Astronomy &rArr; CalcSolarZenithAngleAndAzimuthAngle &rArr; Mod &rArr; __aeabi_d2iz
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[23c]">CPU_IntDis</a>
 <LI><a href="#[23d]">CPU_IntEn</a>
 <LI><a href="#[103]">CPU_SR_Save</a>
 <LI><a href="#[104]">CPU_SR_Restore</a>
 <LI><a href="#[23e]">CPU_WaitForInt</a>
 <LI><a href="#[23f]">CPU_WaitForExcept</a>
 <LI><a href="#[1b2]">CPU_CntLeadZeros</a>
 <LI><a href="#[240]">CPU_CntTrailZeros</a>
 <LI><a href="#[241]">CPU_RevBits</a>
 <LI><a href="#[cd]">__user_initial_stackheap</a>
 <LI><a href="#[196]">OSStartHighRdy</a>
 <LI><a href="#[194]">OSCtxSw</a>
 <LI><a href="#[193]">OSIntCtxSw</a>
 <LI><a href="#[b]">OS_CPU_PendSVHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a9]">AngleCalibrationMode</a> from workmodemanager.o(i.AngleCalibrationMode) referenced from workmodemanager.o(i.IdelMode)
 <LI><a href="#[b0]">AngleMangement</a> from main.o(i.AngleMangement) referenced from main.o(i.main)
 <LI><a href="#[b8]">Astronomy</a> from main.o(i.Astronomy) referenced from main.o(i.main)
 <LI><a href="#[8e]">AutoAIMode</a> from workmodemanager.o(i.AutoAIMode) referenced from workmodemanager.o(i.AutoModeSwitch)
 <LI><a href="#[8d]">AutoBatSOCLowMode</a> from workmodemanager.o(i.AutoBatSOCLowMode) referenced from workmodemanager.o(i.AutoModeSwitch)
 <LI><a href="#[a6]">AutoMode</a> from workmodemanager.o(i.AutoMode) referenced from workmodemanager.o(i.IdelMode)
 <LI><a href="#[8b]">AutoModeSwitch</a> from workmodemanager.o(i.AutoModeSwitch) referenced from workmodemanager.o(i.AutoAIMode)
 <LI><a href="#[8b]">AutoModeSwitch</a> from workmodemanager.o(i.AutoModeSwitch) referenced from workmodemanager.o(i.AutoBatSOCLowMode)
 <LI><a href="#[8b]">AutoModeSwitch</a> from workmodemanager.o(i.AutoModeSwitch) referenced from workmodemanager.o(i.AutoRainMode)
 <LI><a href="#[8b]">AutoModeSwitch</a> from workmodemanager.o(i.AutoModeSwitch) referenced from workmodemanager.o(i.AutoSnowMode)
 <LI><a href="#[8b]">AutoModeSwitch</a> from workmodemanager.o(i.AutoModeSwitch) referenced from workmodemanager.o(i.AutoTrackMode)
 <LI><a href="#[8b]">AutoModeSwitch</a> from workmodemanager.o(i.AutoModeSwitch) referenced from workmodemanager.o(i.AutoWindMode)
 <LI><a href="#[8b]">AutoModeSwitch</a> from workmodemanager.o(i.AutoModeSwitch) referenced from workmodemanager.o(i.WorkModeInit)
 <LI><a href="#[8f]">AutoRainMode</a> from workmodemanager.o(i.AutoRainMode) referenced from workmodemanager.o(i.AutoModeSwitch)
 <LI><a href="#[90]">AutoSnowMode</a> from workmodemanager.o(i.AutoSnowMode) referenced from workmodemanager.o(i.AutoModeSwitch)
 <LI><a href="#[91]">AutoTrackMode</a> from workmodemanager.o(i.AutoTrackMode) referenced from workmodemanager.o(i.AutoModeSwitch)
 <LI><a href="#[8c]">AutoWindMode</a> from workmodemanager.o(i.AutoWindMode) referenced from workmodemanager.o(i.AutoModeSwitch)
 <LI><a href="#[92]">BatteryCharacterB7030</a> from batterypower.o(i.BatteryCharacterB7030) referenced from batterypower.o(i.BatteryPowerInit)
 <LI><a href="#[7]">BusFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[aa]">CleanMode</a> from workmodemanager.o(i.CleanMode) referenced from workmodemanager.o(i.IdelMode)
 <LI><a href="#[18]">DMA1_Channel1_IRQHandler</a> from adcsample.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[ab]">DMA2C5Send</a> from modbusframehal.o(i.DMA2C5Send) referenced from modbusframehal.o(i.ModbusPortInit)
 <LI><a href="#[45]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9b]">HWNULL</a> from hwprotocol.o(i.HWNULL) referenced from hwprotocol.o(i.HWProtocolInit)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8a]">IdelMode</a> from workmodemanager.o(i.IdelMode) referenced from workmodemanager.o(i.AngleCalibrationMode)
 <LI><a href="#[8a]">IdelMode</a> from workmodemanager.o(i.IdelMode) referenced from workmodemanager.o(i.AutoMode)
 <LI><a href="#[8a]">IdelMode</a> from workmodemanager.o(i.IdelMode) referenced from workmodemanager.o(i.AutoModeSwitch)
 <LI><a href="#[8a]">IdelMode</a> from workmodemanager.o(i.IdelMode) referenced from workmodemanager.o(i.CleanMode)
 <LI><a href="#[8a]">IdelMode</a> from workmodemanager.o(i.IdelMode) referenced from workmodemanager.o(i.MaintenanceMode)
 <LI><a href="#[8a]">IdelMode</a> from workmodemanager.o(i.IdelMode) referenced from workmodemanager.o(i.ManualMode)
 <LI><a href="#[8a]">IdelMode</a> from workmodemanager.o(i.IdelMode) referenced from workmodemanager.o(i.WorkModeInit)
 <LI><a href="#[b9]">LedIWDG</a> from main.o(i.LedIWDG) referenced from main.o(i.main)
 <LI><a href="#[a8]">MaintenanceMode</a> from workmodemanager.o(i.MaintenanceMode) referenced from workmodemanager.o(i.IdelMode)
 <LI><a href="#[a7]">ManualMode</a> from workmodemanager.o(i.ManualMode) referenced from workmodemanager.o(i.IdelMode)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b3]">ModbusOverLoRa</a> from main.o(i.ModbusOverLoRa) referenced from main.o(i.main)
 <LI><a href="#[b7]">MotorAngleControl</a> from main.o(i.MotorAngleControl) referenced from main.o(i.main)
 <LI><a href="#[b5]">MotorProtection</a> from main.o(i.MotorProtection) referenced from main.o(i.main)
 <LI><a href="#[4]">NMI_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">OSTaskSwHook</a> from os_cpu_c.o(i.OSTaskSwHook) referenced from os_cpu_a.o(CODE)
 <LI><a href="#[b]">OS_CPU_PendSVHandler</a> from os_cpu_a.o(CODE) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c]">OS_CPU_SysTickHandler</a> from os_cpu_c.o(i.OS_CPU_SysTickHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[ad]">OS_IdleTask</a> from os_core.o(i.OS_IdleTask) referenced from os_core.o(i.OS_IdleTaskInit)
 <LI><a href="#[ac]">OS_TaskReturn</a> from os_task.o(i.OS_TaskReturn) referenced from os_cpu_c.o(i.OSTaskStkInit)
 <LI><a href="#[ae]">OS_TickTask</a> from os_tick.o(i.OS_TickTask) referenced from os_tick.o(i.OS_TickTaskInit)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[af]">ParameterSave</a> from main.o(i.ParameterSave) referenced from main.o(i.main)
 <LI><a href="#[b2]">PowerManagement</a> from main.o(i.PowerManagement) referenced from main.o(i.main)
 <LI><a href="#[55]">RAzimuthAngle1</a> from asprotocol.o(i.RAzimuthAngle1) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[56]">RAzimuthAngle2</a> from asprotocol.o(i.RAzimuthAngle2) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[74]">RBatCurrent</a> from asprotocol.o(i.RBatCurrent) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[72]">RBatSOCTemp</a> from asprotocol.o(i.RBatSOCTemp) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[71]">RBatState</a> from asprotocol.o(i.RBatState) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[73]">RBatVoltage</a> from asprotocol.o(i.RBatVoltage) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">RDeviceEdition</a> from asprotocol.o(i.RDeviceEdition) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[93]">RDeviceEdition1_HW0</a> from hwprotocol.o(i.RDeviceEdition1_HW0) referenced from hwprotocol.o(i.HWProtocolInit)
 <LI><a href="#[94]">RDeviceEdition2_HW1</a> from hwprotocol.o(i.RDeviceEdition2_HW1) referenced from hwprotocol.o(i.HWProtocolInit)
 <LI><a href="#[51]">RDeviceType</a> from asprotocol.o(i.RDeviceType) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[95]">RDeviceType_HW2</a> from hwprotocol.o(i.RDeviceType_HW2) referenced from hwprotocol.o(i.HWProtocolInit)
 <LI><a href="#[53]">RElevationAngle1</a> from asprotocol.o(i.RElevationAngle1) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[54]">RElevationAngle2</a> from asprotocol.o(i.RElevationAngle2) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[65]">RMotorCurrent</a> from asprotocol.o(i.RMotorCurrent) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[70]">RPVBuckerVoltage</a> from asprotocol.o(i.RPVBuckerVoltage) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[63]">RPVStringCur</a> from asprotocol.o(i.RPVStringCur) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[59]">RRealAngle1</a> from asprotocol.o(i.RRealAngle1) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[5a]">RRealAngle2</a> from asprotocol.o(i.RRealAngle2) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[a5]">RRealAngle_HW23</a> from hwprotocol.o(i.RRealAngle_HW23) referenced from hwprotocol.o(i.HWProtocolInit)
 <LI><a href="#[36]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b4]">RTCTime</a> from main.o(i.RTCTime) referenced from main.o(i.main)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[57]">RTargetAngle1</a> from asprotocol.o(i.RTargetAngle1) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[58]">RTargetAngle2</a> from asprotocol.o(i.RTargetAngle2) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[a2]">RTargetAngle_HW17</a> from hwprotocol.o(i.RTargetAngle_HW17) referenced from hwprotocol.o(i.HWProtocolInit)
 <LI><a href="#[64]">RTemp</a> from asprotocol.o(i.RTemp) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[62]">RWAIRemoteTarget</a> from asprotocol.o(i.RWAIRemoteTarget) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[87]">RWBackAngle</a> from asprotocol.o(i.RWBackAngle) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[52]">RWChannelEnable</a> from asprotocol.o(i.RWChannelEnable) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[77]">RWCleaningDockAngle</a> from asprotocol.o(i.RWCleaningDockAngle) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[75]">RWComID</a> from asprotocol.o(i.RWComID) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[83]">RWESoftLimitAngle1</a> from asprotocol.o(i.RWESoftLimitAngle1) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[84]">RWESoftLimitAngle2</a> from asprotocol.o(i.RWESoftLimitAngle2) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[6e]">RWEWTracingAccuracy1</a> from asprotocol.o(i.RWEWTracingAccuracy1) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[6f]">RWEWTracingAccuracy2</a> from asprotocol.o(i.RWEWTracingAccuracy2) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[88]">RWEWindProtectionAngle</a> from asprotocol.o(i.RWEWindProtectionAngle) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[6a]">RWLatitude1</a> from asprotocol.o(i.RWLatitude1) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[6b]">RWLatitude2</a> from asprotocol.o(i.RWLatitude2) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[98]">RWLatitude_HW5</a> from hwprotocol.o(i.RWLatitude_HW5) referenced from hwprotocol.o(i.HWProtocolInit)
 <LI><a href="#[68]">RWLongitude1</a> from asprotocol.o(i.RWLongitude1) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[69]">RWLongitude2</a> from asprotocol.o(i.RWLongitude2) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[97]">RWLongitude_HW4</a> from hwprotocol.o(i.RWLongitude_HW4) referenced from hwprotocol.o(i.HWProtocolInit)
 <LI><a href="#[82]">RWLowStopTime</a> from asprotocol.o(i.RWLowStopTime) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[81]">RWLowWindSpeed</a> from asprotocol.o(i.RWLowWindSpeed) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[78]">RWMotorOrientation</a> from asprotocol.o(i.RWMotorOrientation) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[96]">RWNum_HW3</a> from hwprotocol.o(i.RWNum_HW3) referenced from hwprotocol.o(i.HWProtocolInit)
 <LI><a href="#[79]">RWPVModuleWidth1</a> from asprotocol.o(i.RWPVModuleWidth1) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[7a]">RWPVModuleWidth2</a> from asprotocol.o(i.RWPVModuleWidth2) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[7b]">RWPostSpacing1</a> from asprotocol.o(i.RWPostSpacing1) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[7c]">RWPostSpacing2</a> from asprotocol.o(i.RWPostSpacing2) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[76]">RWPowerMode</a> from asprotocol.o(i.RWPowerMode) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[66]">RWProtectCurrent1</a> from asprotocol.o(i.RWProtectCurrent1) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[67]">RWProtectCurrent2</a> from asprotocol.o(i.RWProtectCurrent2) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[61]">RWRemoteWindSpeed</a> from asprotocol.o(i.RWRemoteWindSpeed) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[9a]">RWRemoteWindSpeed_HW7</a> from hwprotocol.o(i.RWRemoteWindSpeed_HW7) referenced from hwprotocol.o(i.HWProtocolInit)
 <LI><a href="#[7d]">RWTerrainSlope1</a> from asprotocol.o(i.RWTerrainSlope1) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[7e]">RWTerrainSlope2</a> from asprotocol.o(i.RWTerrainSlope2) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[5d]">RWTimeDay</a> from asprotocol.o(i.RWTimeDay) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[9e]">RWTimeDay_HW12</a> from hwprotocol.o(i.RWTimeDay_HW12) referenced from hwprotocol.o(i.HWProtocolInit)
 <LI><a href="#[5e]">RWTimeHour</a> from asprotocol.o(i.RWTimeHour) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[9f]">RWTimeHour_HW13</a> from hwprotocol.o(i.RWTimeHour_HW13) referenced from hwprotocol.o(i.HWProtocolInit)
 <LI><a href="#[5f]">RWTimeMinute</a> from asprotocol.o(i.RWTimeMinute) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[a0]">RWTimeMinute_HW14</a> from hwprotocol.o(i.RWTimeMinute_HW14) referenced from hwprotocol.o(i.HWProtocolInit)
 <LI><a href="#[5c]">RWTimeMonth</a> from asprotocol.o(i.RWTimeMonth) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[9d]">RWTimeMonth_HW11</a> from hwprotocol.o(i.RWTimeMonth_HW11) referenced from hwprotocol.o(i.HWProtocolInit)
 <LI><a href="#[60]">RWTimeSecond</a> from asprotocol.o(i.RWTimeSecond) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[a1]">RWTimeSecond_HW15</a> from hwprotocol.o(i.RWTimeSecond_HW15) referenced from hwprotocol.o(i.HWProtocolInit)
 <LI><a href="#[5b]">RWTimeYear</a> from asprotocol.o(i.RWTimeYear) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[9c]">RWTimeYear_HW10</a> from hwprotocol.o(i.RWTimeYear_HW10) referenced from hwprotocol.o(i.HWProtocolInit)
 <LI><a href="#[6c]">RWTimeZone1</a> from asprotocol.o(i.RWTimeZone1) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[6d]">RWTimeZone2</a> from asprotocol.o(i.RWTimeZone2) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[80]">RWUpStartTime</a> from asprotocol.o(i.RWUpStartTime) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[7f]">RWUpWindSpeed</a> from asprotocol.o(i.RWUpWindSpeed) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[85]">RWWSoftLimitAngle1</a> from asprotocol.o(i.RWWSoftLimitAngle1) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[86]">RWWSoftLimitAngle2</a> from asprotocol.o(i.RWWSoftLimitAngle2) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[89]">RWWWindProtectionAngle</a> from asprotocol.o(i.RWWWindProtectionAngle) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[4d]">RWWorkMode1</a> from asprotocol.o(i.RWWorkMode1) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[4e]">RWWorkMode2</a> from asprotocol.o(i.RWWorkMode2) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[99]">RWWorkMode_HW6</a> from hwprotocol.o(i.RWWorkMode_HW6) referenced from hwprotocol.o(i.HWProtocolInit)
 <LI><a href="#[4f]">RWarningAndFault1</a> from asprotocol.o(i.RWarningAndFault1) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[a3]">RWarningAndFault1_HW20</a> from hwprotocol.o(i.RWarningAndFault1_HW20) referenced from hwprotocol.o(i.HWProtocolInit)
 <LI><a href="#[50]">RWarningAndFault2</a> from asprotocol.o(i.RWarningAndFault2) referenced from asprotocol.o(i.ASProtocolInit)
 <LI><a href="#[a4]">RWarningAndFault2_HW21</a> from hwprotocol.o(i.RWarningAndFault2_HW21) referenced from hwprotocol.o(i.HWProtocolInit)
 <LI><a href="#[3]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b1]">Sampling</a> from main.o(i.Sampling) referenced from main.o(i.main)
 <LI><a href="#[49]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[f]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from motorcontrol.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">UART4_IRQHandler</a> from modbusframehal.o(i.UART4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b6]">WorkmodeControl</a> from main.o(i.WorkmodeControl) referenced from main.o(i.main)
 <LI><a href="#[ba]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[ba]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[bb]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[bd]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[217]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[218]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[219]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[21a]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[21b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[c1]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[21c]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[21d]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[21e]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[21f]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[220]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[221]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[222]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[223]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[224]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[225]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[226]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[227]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[228]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[229]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[22a]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[22b]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[22c]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[22d]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[22e]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[22f]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[230]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[c6]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[231]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[232]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[233]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[234]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[235]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[236]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[237]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[bc]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[238]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[be]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c0]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[239]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[c2]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; OSInit &rArr; OS_TickTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[23a]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[ce]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[c5]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[23b]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[c7]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[23c]"></a>CPU_IntDis</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>CPU_IntEn</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateDly
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagPost
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterSave
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurGet
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurReset
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[104]"></a>CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateDly
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagPost
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterSave
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurGet
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurReset
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[23e]"></a>CPU_WaitForInt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>CPU_WaitForExcept</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>CPU_CntLeadZeros</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
</UL>

<P><STRONG><a name="[240]"></a>CPU_CntTrailZeros</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[241]"></a>CPU_RevBits</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[242]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[cb]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acosf
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[245]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[248]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[c4]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c8]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[249]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[194]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>

<P><STRONG><a name="[193]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[b]"></a>OS_CPU_PendSVHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>ADCConvert</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, adcsample.o(i.ADCConvert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADCConvert
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearFlag
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sampling
</UL>

<P><STRONG><a name="[d4]"></a>ADCInit</STRONG> (Thumb, 404 bytes, Stack size 72 bytes, adcsample.o(i.ADCInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ADCInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sampling
</UL>

<P><STRONG><a name="[d0]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCConvert
</UL>

<P><STRONG><a name="[dd]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
</UL>

<P><STRONG><a name="[d2]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCConvert
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[df]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
</UL>

<P><STRONG><a name="[db]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f10x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
</UL>

<P><STRONG><a name="[dc]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f10x_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
</UL>

<P><STRONG><a name="[de]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_ResetCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
</UL>

<P><STRONG><a name="[d3]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCConvert
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
</UL>

<P><STRONG><a name="[1c5]"></a>ASProtocolInit</STRONG> (Thumb, 334 bytes, Stack size 0 bytes, asprotocol.o(i.ASProtocolInit))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolInit
</UL>

<P><STRONG><a name="[e5]"></a>AngleSensorInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, anglesensorhal.o(i.AngleSensorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AngleSensorInit &rArr; SPI1Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRegister
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleMangement
</UL>

<P><STRONG><a name="[f1]"></a>BKPInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, backupregister.o(i.BKPInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKPInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_TamperPinCmd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ITConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCTime
</UL>

<P><STRONG><a name="[f7]"></a>BKPReadRTCUpdateFlag</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, backupregister.o(i.BKPReadRTCUpdateFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BKPReadRTCUpdateFlag &rArr; BKP_ReadBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCTime
</UL>

<P><STRONG><a name="[f9]"></a>BKPWriteRTCUpdateFlag</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, backupregister.o(i.BKPWriteRTCUpdateFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BKPWriteRTCUpdateFlag &rArr; BKP_WriteBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWTimeSecond
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWTimeSecond_HW15
</UL>

<P><STRONG><a name="[f6]"></a>BKP_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_bkp.o(i.BKP_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPInit
</UL>

<P><STRONG><a name="[f5]"></a>BKP_ITConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_bkp.o(i.BKP_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPInit
</UL>

<P><STRONG><a name="[f8]"></a>BKP_ReadBackupRegister</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_bkp.o(i.BKP_ReadBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPReadRTCUpdateFlag
</UL>

<P><STRONG><a name="[f4]"></a>BKP_TamperPinCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_bkp.o(i.BKP_TamperPinCmd))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPInit
</UL>

<P><STRONG><a name="[fa]"></a>BKP_WriteBackupRegister</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_bkp.o(i.BKP_WriteBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPWriteRTCUpdateFlag
</UL>

<P><STRONG><a name="[fc]"></a>BatteryPowerInit</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, batterypower.o(i.BatteryPowerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BatteryPowerInit &rArr; ChargerInit &rArr; IICWrite &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatingInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryType
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryTypeIOInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerInit
</UL>

<P><STRONG><a name="[102]"></a>CPU_IntDisMeasMaxCurGet</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cpu_core.o(i.CPU_IntDisMeasMaxCurGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = CPU_IntDisMeasMaxCurGet
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurReset
</UL>

<P><STRONG><a name="[106]"></a>CPU_IntDisMeasMaxCurReset</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cpu_core.o(i.CPU_IntDisMeasMaxCurReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = CPU_IntDisMeasMaxCurReset &rArr; CPU_IntDisMeasMaxCurGet
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurGet
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>

<P><STRONG><a name="[107]"></a>CPU_IntDisMeasStart</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, cpu_core.o(i.CPU_IntDisMeasStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CPU_IntDisMeasStart
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateDly
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagPost
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterSave
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[109]"></a>CPU_IntDisMeasStop</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, cpu_core.o(i.CPU_IntDisMeasStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CPU_IntDisMeasStop
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateDly
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagPost
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterSave
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[108]"></a>CPU_TS_TmrRd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu_core.o(i.CPU_TS_TmrRd))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateDly
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPost
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
</UL>

<P><STRONG><a name="[eb]"></a>CalcSolarZenithAngleAndAzimuthAngle</STRONG> (Thumb, 4736 bytes, Stack size 272 bytes, astronomicalalgorithms.o(i.CalcSolarZenithAngleAndAzimuthAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = CalcSolarZenithAngleAndAzimuthAngle &rArr; Mod &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDayOfYear
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acosf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Astronomy
</UL>

<P><STRONG><a name="[123]"></a>ChargerActive</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, batterypower.o(i.ChargerActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ChargerActive &rArr; IICWrite &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeCmd
</UL>

<P><STRONG><a name="[124]"></a>ChargerReset</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, batterypower.o(i.ChargerReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ChargerReset &rArr; IICWrite &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWrite
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeCmd
</UL>

<P><STRONG><a name="[121]"></a>ChargerSuspend</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, batterypower.o(i.ChargerSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ChargerSuspend &rArr; IICWrite &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeCmd
</UL>

<P><STRONG><a name="[128]"></a>ClosePVPower</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pvpower.o(i.ClosePVPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ClosePVPower
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMangement
</UL>

<P><STRONG><a name="[18]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, adcsample.o(i.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12b]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[d1]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCConvert
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2C5Send
</UL>

<P><STRONG><a name="[12a]"></a>DMA_GetITStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4Init
</UL>

<P><STRONG><a name="[d9]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4Init
</UL>

<P><STRONG><a name="[127]"></a>Delayus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, iicbsp.o(i.Delayus))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerReset
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStop
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStart
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSetNACK
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSetACK
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSendOneByte
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICGetOneByte
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICGetACK
</UL>

<P><STRONG><a name="[12c]"></a>DetectEmergencyStop</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, motorprotection.o(i.DetectEmergencyStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DetectEmergencyStop &rArr; __aeabi_cfcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorProtection
</UL>

<P><STRONG><a name="[12d]"></a>DetectMotorReverseAngleNoChange</STRONG> (Thumb, 558 bytes, Stack size 16 bytes, motorprotection.o(i.DetectMotorReverseAngleNoChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = DetectMotorReverseAngleNoChange &rArr; OSFlagPost &rArr; OS_FlagPost &rArr; OS_FlagTaskRdy &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorProtection
</UL>

<P><STRONG><a name="[12f]"></a>DetectOverCurrent</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, motorprotection.o(i.DetectOverCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DetectOverCurrent &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorProtection
</UL>

<P><STRONG><a name="[131]"></a>DetectSoftLimit</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, motorprotection.o(i.DetectSoftLimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DetectSoftLimit &rArr; __aeabi_cfcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorProtection
</UL>

<P><STRONG><a name="[132]"></a>EraseNewSystemFlash</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, flashstoragehal.o(i.EraseNewSystemFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EraseNewSystemFlash &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterSave
</UL>

<P><STRONG><a name="[134]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteWorkModeToFlash
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteNewSystemToFlash
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteIAPFlagToFlash
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfigParaToFlash
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseNewSystemFlash
</UL>

<P><STRONG><a name="[135]"></a>FLASH_ErasePage</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32f10x_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteWorkModeToFlash
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfigParaToFlash
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseNewSystemFlash
</UL>

<P><STRONG><a name="[13b]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_GetBank1Status))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[136]"></a>FLASH_GetStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteWorkModeToFlash
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteNewSystemToFlash
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteIAPFlagToFlash
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfigParaToFlash
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseNewSystemFlash
</UL>

<P><STRONG><a name="[137]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteWorkModeToFlash
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteNewSystemToFlash
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteIAPFlagToFlash
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfigParaToFlash
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseNewSystemFlash
</UL>

<P><STRONG><a name="[139]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f10x_flash.o(i.FLASH_ProgramHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteWorkModeToFlash
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteNewSystemToFlash
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteIAPFlagToFlash
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfigParaToFlash
</UL>

<P><STRONG><a name="[13a]"></a>FLASH_ProgramWord</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, stm32f10x_flash.o(i.FLASH_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteIAPFlagToFlash
</UL>

<P><STRONG><a name="[133]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteWorkModeToFlash
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteNewSystemToFlash
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteIAPFlagToFlash
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfigParaToFlash
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseNewSystemFlash
</UL>

<P><STRONG><a name="[138]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[d7]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVPowerInit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDVInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorIOInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatingInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryTypeIOInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1Init
</UL>

<P><STRONG><a name="[1dd]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4Init
</UL>

<P><STRONG><a name="[146]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHardwareVersion
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryType
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICGetOneByte
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICGetACK
</UL>

<P><STRONG><a name="[14e]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVPowerInit
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenPVPower
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatingCmd
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaModulePowerOn
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDTurnOn
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDFlash
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorIOInit
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorEW
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorEN
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatingInit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRegister
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRegister
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStop
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStart
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSetNACK
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSetACK
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSendOneByte
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICGetOneByte
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICGetACK
</UL>

<P><STRONG><a name="[129]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatingCmd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClosePVPower
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaModulePowerOff
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDTurnOff
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDFlash
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorEW
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorEN
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICInit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRegister
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRegister
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStop
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStart
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSetNACK
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSetACK
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSendOneByte
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICGetOneByte
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICGetACK
</UL>

<P><STRONG><a name="[1c6]"></a>GetASProtocl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, asprotocol.o(i.GetASProtocl))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolInit
</UL>

<P><STRONG><a name="[e6]"></a>GetAngle</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, anglesensorhal.o(i.GetAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GetAngle &rArr; CalcAngle &rArr; KalmanFilter &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRegister
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAngle
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleMangement
</UL>

<P><STRONG><a name="[ec]"></a>GetAstronomicalTargetAngle</STRONG> (Thumb, 736 bytes, Stack size 104 bytes, astronomicalalgorithms.o(i.GetAstronomicalTargetAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GetAstronomicalTargetAngle &rArr; tanf &rArr; __mathlib_rredf2 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Astronomy
</UL>

<P><STRONG><a name="[13f]"></a>GetBatteryChargerState</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, batterypower.o(i.GetBatteryChargerState))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GetBatteryChargerState &rArr; IICRead &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICRead
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryInfo
</UL>

<P><STRONG><a name="[141]"></a>GetBatteryCurrent</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, batterypower.o(i.GetBatteryCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GetBatteryCurrent &rArr; IICRead &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICRead
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryInfo
</UL>

<P><STRONG><a name="[145]"></a>GetBatterySOC</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, batterypower.o(i.GetBatterySOC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetBatterySOC
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryInfo
</UL>

<P><STRONG><a name="[144]"></a>GetBatteryTemp</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, batterypower.o(i.GetBatteryTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GetBatteryTemp &rArr; IICRead &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICRead
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryInfo
</UL>

<P><STRONG><a name="[143]"></a>GetBatteryVoltage</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, batterypower.o(i.GetBatteryVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GetBatteryVoltage &rArr; IICRead &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICRead
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryInfo
</UL>

<P><STRONG><a name="[147]"></a>GetEmergencyVoltage</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, adcsample.o(i.GetEmergencyVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetEmergencyVoltage &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sampling
</UL>

<P><STRONG><a name="[1c8]"></a>GetHWProtocl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hwprotocol.o(i.GetHWProtocl))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolInit
</UL>

<P><STRONG><a name="[13e]"></a>GetHardwareVersion</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hardwareversion.o(i.GetHardwareVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetHardwareVersion
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedParaInit
</UL>

<P><STRONG><a name="[148]"></a>GetMotorCurrent</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, adcsample.o(i.GetMotorCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetMotorCurrent &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sampling
</UL>

<P><STRONG><a name="[179]"></a>GetMotorDirState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, motorcontrol.o(i.GetMotorDirState))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorAngleControl
</UL>

<P><STRONG><a name="[178]"></a>GetMotorRunningState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, motorcontrol.o(i.GetMotorRunningState))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorAngleControl
</UL>

<P><STRONG><a name="[149]"></a>GetPVBuckerVoltage</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, adcsample.o(i.GetPVBuckerVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetPVBuckerVoltage &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sampling
</UL>

<P><STRONG><a name="[14a]"></a>GetPVStringDownCur</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, adcsample.o(i.GetPVStringDownCur))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetPVStringDownCur &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sampling
</UL>

<P><STRONG><a name="[14b]"></a>GetPVStringUpCur</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, adcsample.o(i.GetPVStringUpCur))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetPVStringUpCur &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sampling
</UL>

<P><STRONG><a name="[14c]"></a>GetTMP</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, tmpsensor.o(i.GetTMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GetTMP &rArr; IICRead &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICRead
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sampling
</UL>

<P><STRONG><a name="[14d]"></a>GetTime</STRONG> (Thumb, 428 bytes, Stack size 40 bytes, rtc.o(i.GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCTime
</UL>

<P><STRONG><a name="[13d]"></a>HDVInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, hardwareversion.o(i.HDVInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HDVInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedParaInit
</UL>

<P><STRONG><a name="[1c7]"></a>HWProtocolInit</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, hwprotocol.o(i.HWProtocolInit))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolInit
</UL>

<P><STRONG><a name="[122]"></a>HeatingCmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, batterypower.o(i.HeatingCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HeatingCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeCmd
</UL>

<P><STRONG><a name="[fe]"></a>IICInit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, iicbsp.o(i.IICInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IICInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryPowerInit
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMPSensorInit
</UL>

<P><STRONG><a name="[140]"></a>IICRead</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, iicbsp.o(i.IICRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IICRead &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStop
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStart
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSetNACK
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSetACK
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSendOneByte
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICGetOneByte
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICGetACK
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryVoltage
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryTemp
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryCurrent
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryChargerState
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTMP
</UL>

<P><STRONG><a name="[125]"></a>IICWrite</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, iicbsp.o(i.IICWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IICWrite &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStop
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStart
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSendOneByte
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICGetACK
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerSuspend
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerReset
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerActive
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerInit
</UL>

<P><STRONG><a name="[157]"></a>IICWriteByte</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, iicbsp.o(i.IICWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IICWriteByte &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStop
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStart
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSendOneByte
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICGetACK
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP75Init
</UL>

<P><STRONG><a name="[158]"></a>IWDGInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, init.o(i.IWDGInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IWDGInit &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSICmd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15f]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDGInit
</UL>

<P><STRONG><a name="[15e]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedIWDG
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDGInit
</UL>

<P><STRONG><a name="[15c]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDGInit
</UL>

<P><STRONG><a name="[15d]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_SetReload))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDGInit
</UL>

<P><STRONG><a name="[15b]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_WriteAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDGInit
</UL>

<P><STRONG><a name="[160]"></a>LEDFlash</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ledhal.o(i.LEDFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEDFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedIWDG
</UL>

<P><STRONG><a name="[161]"></a>LEDInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ledhal.o(i.LEDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedIWDG
</UL>

<P><STRONG><a name="[162]"></a>LEDTurnOff</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ledhal.o(i.LEDTurnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEDTurnOff
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedIWDG
</UL>

<P><STRONG><a name="[163]"></a>LEDTurnOn</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ledhal.o(i.LEDTurnOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEDTurnOn
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedIWDG
</UL>

<P><STRONG><a name="[165]"></a>LoRaModulePowerOff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, modbusframehal.o(i.LoRaModulePowerOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaModulePowerOff
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusOverLoRa
</UL>

<P><STRONG><a name="[166]"></a>LoRaModulePowerOn</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, modbusframehal.o(i.LoRaModulePowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaModulePowerOn
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusOverLoRa
</UL>

<P><STRONG><a name="[16b]"></a>ModbusPortInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, modbusframehal.o(i.ModbusPortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ModbusPortInit &rArr; UART4Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusOverLoRa
</UL>

<P><STRONG><a name="[16d]"></a>ModbusRead</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, modbusframehal.o(i.ModbusRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ModbusRead &rArr; CRC16Check
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16Check
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusOverLoRa
</UL>

<P><STRONG><a name="[16f]"></a>ModbusSend</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, modbusframehal.o(i.ModbusSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ModbusSend &rArr; CRC16Check
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16Check
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusOverLoRa
</UL>

<P><STRONG><a name="[172]"></a>MotorAllStop</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, motorcontrol.o(i.MotorAllStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MotorAllStop &rArr; MotorEN
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorEN
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorAngleControl
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorTurnWest
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorTurnEast
</UL>

<P><STRONG><a name="[175]"></a>MotorInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, motorcontrol.o(i.MotorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MotorInit &rArr; MotorIOInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorIOInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorAngleControl
</UL>

<P><STRONG><a name="[176]"></a>MotorTurnEast</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, motorcontrol.o(i.MotorTurnEast))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MotorTurnEast &rArr; MotorAllStop &rArr; MotorEN
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorAllStop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorEW
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorAngleControl
</UL>

<P><STRONG><a name="[177]"></a>MotorTurnWest</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, motorcontrol.o(i.MotorTurnWest))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MotorTurnWest &rArr; MotorAllStop &rArr; MotorEN
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorAllStop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorEW
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorAngleControl
</UL>

<P><STRONG><a name="[17e]"></a>NVICInit</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, init.o(i.NVICInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVICInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[180]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVICInit
</UL>

<P><STRONG><a name="[17f]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVICInit
</UL>

<P><STRONG><a name="[190]"></a>OSCfg_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cfg_app.o(i.OSCfg_Init))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[181]"></a>OSFlagCreate</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, os_flag.o(i.OSFlagCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = OSFlagCreate &rArr; CPU_IntDisMeasStop
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[183]"></a>OSFlagPend</STRONG> (Thumb, 936 bytes, Stack size 96 bytes, os_flag.o(i.OSFlagPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = OSFlagPend &rArr; OS_FlagBlock &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagBlock
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMangement
</UL>

<P><STRONG><a name="[12e]"></a>OSFlagPost</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, os_flag.o(i.OSFlagPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OSFlagPost &rArr; OS_FlagPost &rArr; OS_FlagTaskRdy &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagPost
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorAngleControl
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectMotorReverseAngleNoChange
</UL>

<P><STRONG><a name="[1ab]"></a>OSIdleTaskHook</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSIdleTaskHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSIdleTaskHook
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
</UL>

<P><STRONG><a name="[187]"></a>OSInit</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, os_core.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OS_TickTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTaskInit
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInit
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemInit
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHook
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTaskInit
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCfg_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[188]"></a>OSInitHook</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[191]"></a>OSIntExit</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, os_core.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[185]"></a>OSSched</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, os_core.o(i.OSSched))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagPost
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[195]"></a>OSStart</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, os_core.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSStart &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[197]"></a>OSTaskCreate</STRONG> (Thumb, 368 bytes, Stack size 72 bytes, os_task.o(i.OSTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTaskInit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTaskInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19a]"></a>OSTaskCreateHook</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskCreateHook
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[19d]"></a>OSTaskDel</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, os_task.o(i.OSTaskDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = OSTaskDel &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[1a1]"></a>OSTaskDelHook</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskDelHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskDelHook
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[1b6]"></a>OSTaskReturnHook</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskReturnHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskReturnHook
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[1a2]"></a>OSTaskSemPend</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, os_task.o(i.OSTaskSemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = OSTaskSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
</UL>

<P><STRONG><a name="[1a4]"></a>OSTaskSemPost</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, os_task.o(i.OSTaskSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OSTaskSemPost &rArr; OS_TaskSemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[199]"></a>OSTaskStkInit</STRONG> (Thumb, 192 bytes, Stack size 20 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[4b]"></a>OSTaskSwHook</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, os_cpu_c.o(i.OSTaskSwHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSTaskSwHook &rArr; CPU_IntDisMeasMaxCurReset &rArr; CPU_IntDisMeasMaxCurGet
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(CODE)
</UL>
<P><STRONG><a name="[e7]"></a>OSTimeDly</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, os_time.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsertDly
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkmodeControl
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sampling
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCTime
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerManagement
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterSave
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorProtection
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorAngleControl
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusOverLoRa
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedIWDG
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Astronomy
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleMangement
</UL>

<P><STRONG><a name="[1a7]"></a>OSTimeTick</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_time.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OSTimeTick &rArr; OSTaskSemPost &rArr; OS_TaskSemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[1a8]"></a>OSTimeTickHook</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTimeTickHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[c]"></a>OS_CPU_SysTickHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, os_cpu_c.o(i.OS_CPU_SysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OS_CPU_SysTickHandler &rArr; OSTimeTick &rArr; OSTaskSemPost &rArr; OS_TaskSemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f0]"></a>OS_CPU_SysTickInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_cpu_c.o(i.OS_CPU_SysTickInit))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[184]"></a>OS_FlagBlock</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, os_flag.o(i.OS_FlagBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = OS_FlagBlock &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
</UL>

<P><STRONG><a name="[18b]"></a>OS_FlagInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_flag.o(i.OS_FlagInit))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[186]"></a>OS_FlagPost</STRONG> (Thumb, 370 bytes, Stack size 56 bytes, os_flag.o(i.OS_FlagPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OS_FlagPost &rArr; OS_FlagTaskRdy &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
</UL>

<P><STRONG><a name="[1a9]"></a>OS_FlagTaskRdy</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, os_flag.o(i.OS_FlagTaskRdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OS_FlagTaskRdy &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagPost
</UL>

<P><STRONG><a name="[ad]"></a>OS_IdleTask</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, os_core.o(i.OS_IdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_IdleTask &rArr; OSIdleTaskHook
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIdleTaskHook
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_IdleTaskInit)
</UL>
<P><STRONG><a name="[18e]"></a>OS_IdleTaskInit</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, os_core.o(i.OS_IdleTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OS_IdleTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1a3]"></a>OS_Pend</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, os_core.o(i.OS_Pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInsertPrio
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendDataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagBlock
</UL>

<P><STRONG><a name="[1ad]"></a>OS_PendDataInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os_core.o(i.OS_PendDataInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_PendDataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[182]"></a>OS_PendListInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_core.o(i.OS_PendListInit))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
</UL>

<P><STRONG><a name="[1ae]"></a>OS_PendListInsertPrio</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, os_core.o(i.OS_PendListInsertPrio))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_PendListInsertPrio
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[1a0]"></a>OS_PendListRemove</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, os_core.o(i.OS_PendListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove1
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
</UL>

<P><STRONG><a name="[1af]"></a>OS_PendListRemove1</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, os_core.o(i.OS_PendListRemove1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_PendListRemove1
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
</UL>

<P><STRONG><a name="[1b0]"></a>OS_Post</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, os_core.o(i.OS_Post))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post1
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
</UL>

<P><STRONG><a name="[1b1]"></a>OS_Post1</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, os_core.o(i.OS_Post1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_Post1
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
</UL>

<P><STRONG><a name="[192]"></a>OS_PrioGetHighest</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, os_prio.o(i.OS_PrioGetHighest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[189]"></a>OS_PrioInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_prio.o(i.OS_PrioInit))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[19b]"></a>OS_PrioInsert</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, os_prio.o(i.OS_PrioInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_PrioInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
</UL>

<P><STRONG><a name="[1b4]"></a>OS_PrioRemove</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, os_prio.o(i.OS_PrioRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_PrioRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
</UL>

<P><STRONG><a name="[18a]"></a>OS_RdyListInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_core.o(i.OS_RdyListInit))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1aa]"></a>OS_RdyListInsert</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, os_core.o(i.OS_RdyListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_RdyListInsert &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertHead
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateDly
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
</UL>

<P><STRONG><a name="[1b3]"></a>OS_RdyListInsertHead</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, os_core.o(i.OS_RdyListInsertHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_RdyListInsertHead
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
</UL>

<P><STRONG><a name="[19c]"></a>OS_RdyListInsertTail</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, os_core.o(i.OS_RdyListInsertTail))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_RdyListInsertTail
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
</UL>

<P><STRONG><a name="[19e]"></a>OS_RdyListRemove</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, os_core.o(i.OS_RdyListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
</UL>

<P><STRONG><a name="[18c]"></a>OS_SemInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_sem.o(i.OS_SemInit))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1ac]"></a>OS_TaskBlock</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, os_core.o(i.OS_TaskBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsert
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[18d]"></a>OS_TaskInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskInit))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[198]"></a>OS_TaskInitTCB</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, os_task.o(i.OS_TaskInitTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_TaskInitTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[ac]"></a>OS_TaskReturn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_task.o(i.OS_TaskReturn))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = OS_TaskReturn &rArr; OSTaskDel &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_c.o(i.OSTaskStkInit)
</UL>
<P><STRONG><a name="[1a5]"></a>OS_TaskSemPost</STRONG> (Thumb, 492 bytes, Stack size 32 bytes, os_task.o(i.OS_TaskSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OS_TaskSemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPost
</UL>

<P><STRONG><a name="[1b5]"></a>OS_TickListInsert</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, os_tick.o(i.OS_TickListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_TickListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsertDly
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
</UL>

<P><STRONG><a name="[1a6]"></a>OS_TickListInsertDly</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, os_tick.o(i.OS_TickListInsertDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>

<P><STRONG><a name="[19f]"></a>OS_TickListRemove</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, os_tick.o(i.OS_TickListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_TickListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
</UL>

<P><STRONG><a name="[ae]"></a>OS_TickTask</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, os_tick.o(i.OS_TickTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = OS_TickTask &rArr; OSTaskSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateDly
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tick.o(i.OS_TickTaskInit)
</UL>
<P><STRONG><a name="[18f]"></a>OS_TickTaskInit</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, os_tick.o(i.OS_TickTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OS_TickTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1b9]"></a>OpenPVPower</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pvpower.o(i.OpenPVPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OpenPVPower
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMangement
</UL>

<P><STRONG><a name="[1ba]"></a>PVPowerInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, pvpower.o(i.PVPowerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PVPowerInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerInit
</UL>

<P><STRONG><a name="[f3]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPWriteRTCUpdateFlag
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPInit
</UL>

<P><STRONG><a name="[1bb]"></a>ParaInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, init.o(i.ParaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ParaInit &rArr; FixedParaInit &rArr; HDVInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FixedParaInit
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigParaInit
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterSave
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c3]"></a>PowerInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, powermanagement.o(i.PowerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PowerInit &rArr; BatteryPowerInit &rArr; ChargerInit &rArr; IICWrite &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVPowerInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryPowerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerManagement
</UL>

<P><STRONG><a name="[1c4]"></a>PowerMangement</STRONG> (Thumb, 542 bytes, Stack size 24 bytes, powermanagement.o(i.PowerMangement))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = PowerMangement &rArr; OSFlagPend &rArr; OS_FlagBlock &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenPVPower
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClosePVPower
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryInfo
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeCmd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerManagement
</UL>

<P><STRONG><a name="[16e]"></a>ProtocolAnalysis</STRONG> (Thumb, 1044 bytes, Stack size 40 bytes, protocolanalysis.o(i.ProtocolAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ProtocolAnalysis
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusOverLoRa
</UL>

<P><STRONG><a name="[16c]"></a>ProtocolInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, protocolanalysis.o(i.ProtocolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ProtocolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWProtocolInit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHWProtocl
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetASProtocl
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASProtocolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusOverLoRa
</UL>

<P><STRONG><a name="[d6]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
</UL>

<P><STRONG><a name="[d8]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4Init
</UL>

<P><STRONG><a name="[f2]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4Init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3Init
</UL>

<P><STRONG><a name="[d5]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVPowerInit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDVInit
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorIOInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatingInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryTypeIOInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1Init
</UL>

<P><STRONG><a name="[1e4]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[15a]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDGInit
</UL>

<P><STRONG><a name="[159]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_LSICmd))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDGInit
</UL>

<P><STRONG><a name="[1c9]"></a>RTCInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rtc.o(i.RTCInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTCInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCTime
</UL>

<P><STRONG><a name="[1bd]"></a>ReadConfigParaFromFlash</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, flashstoragehal.o(i.ReadConfigParaFromFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadConfigParaFromFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterSave
</UL>

<P><STRONG><a name="[1be]"></a>ReadWorkModeFromFlash</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, flashstoragehal.o(i.ReadWorkModeFromFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ReadWorkModeFromFlash &rArr; ScanLastWorkModeAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanLastWorkModeAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterSave
</UL>

<P><STRONG><a name="[1cf]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_CalculateCRC))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1Init
</UL>

<P><STRONG><a name="[1cb]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRegister
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRegister
</UL>

<P><STRONG><a name="[1cc]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRegister
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRegister
</UL>

<P><STRONG><a name="[1ce]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1Init
</UL>

<P><STRONG><a name="[1ca]"></a>SetTime</STRONG> (Thumb, 452 bytes, Stack size 48 bytes, rtc.o(i.SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SetTime &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCTime
</UL>

<P><STRONG><a name="[49]"></a>SystemInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 458 bytes, Stack size 40 bytes, motorcontrol.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TIM3_IRQHandler &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorEN
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d4]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3Init
</UL>

<P><STRONG><a name="[1d6]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3Init
</UL>

<P><STRONG><a name="[1d8]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3Init
</UL>

<P><STRONG><a name="[1d9]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[1d7]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3Init
</UL>

<P><STRONG><a name="[1d5]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetAutoreload))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3Init
</UL>

<P><STRONG><a name="[1db]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare1))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[1d3]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3Init
</UL>

<P><STRONG><a name="[1d0]"></a>TMPSensorInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tmpsensor.o(i.TMPSensorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TMPSensorInit &rArr; TMP75Init &rArr; IICWriteByte &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP75Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sampling
</UL>

<P><STRONG><a name="[41]"></a>UART4_IRQHandler</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, modbusframehal.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART4_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1df]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4Init
</UL>

<P><STRONG><a name="[1e2]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4Init
</UL>

<P><STRONG><a name="[1e1]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4Init
</UL>

<P><STRONG><a name="[1e3]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[1e0]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4Init
</UL>

<P><STRONG><a name="[1de]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4Init
</UL>

<P><STRONG><a name="[1e5]"></a>WorkModeInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, workmodemanager.o(i.WorkModeInit))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkmodeControl
</UL>

<P><STRONG><a name="[1e6]"></a>WorkModeMg</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, workmodemanager.o(i.WorkModeMg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WorkModeMg
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkmodeControl
</UL>

<P><STRONG><a name="[1bf]"></a>WriteConfigParaToFlash</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, flashstoragehal.o(i.WriteConfigParaToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WriteConfigParaToFlash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterSave
</UL>

<P><STRONG><a name="[1c2]"></a>WriteIAPFlagToFlash</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, flashstoragehal.o(i.WriteIAPFlagToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WriteIAPFlagToFlash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterSave
</UL>

<P><STRONG><a name="[1c1]"></a>WriteNewSystemToFlash</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, flashstoragehal.o(i.WriteNewSystemToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WriteNewSystemToFlash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterSave
</UL>

<P><STRONG><a name="[1c0]"></a>WriteWorkModeToFlash</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, flashstoragehal.o(i.WriteWorkModeToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = WriteWorkModeToFlash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanLastWorkModeAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterSave
</UL>

<P><STRONG><a name="[1ee]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[1e7]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acosf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[1e9]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_flt_infnan2 &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[1ea]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acosf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[1eb]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[1ec]"></a>__mathlib_rredf2</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_rredf2 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[11c]"></a>acosf</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, acosf.o(i.acosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = acosf &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSolarZenithAngleAndAzimuthAngle
</UL>

<P><STRONG><a name="[11a]"></a>asinf</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, asinf.o(i.asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = asinf &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAstronomicalTargetAngle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSolarZenithAngleAndAzimuthAngle
</UL>

<P><STRONG><a name="[10e]"></a>atan2f</STRONG> (Thumb, 528 bytes, Stack size 32 bytes, atan2f.o(i.atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = atan2f &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAstronomicalTargetAngle
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAngle
</UL>

<P><STRONG><a name="[119]"></a>cosf</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, cosf.o(i.cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cosf &rArr; __mathlib_rredf2 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAstronomicalTargetAngle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSolarZenithAngleAndAzimuthAngle
</UL>

<P><STRONG><a name="[c3]"></a>main</STRONG> (Thumb, 580 bytes, Stack size 48 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OS_TickTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickInit
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaInit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVICInit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDGInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[167]"></a>rint</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rint.o(i.rint))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rint &rArr; _drnd &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod
</UL>

<P><STRONG><a name="[118]"></a>sinf</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, sinf.o(i.sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAstronomicalTargetAngle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSolarZenithAngleAndAzimuthAngle
</UL>

<P><STRONG><a name="[1ed]"></a>sqrtf</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acosf
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[11b]"></a>tanf</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, tanf.o(i.tanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tanf &rArr; __mathlib_rredf2 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAstronomicalTargetAngle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSolarZenithAngleAndAzimuthAngle
</UL>

<P><STRONG><a name="[10d]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryTemp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWPostSpacing2
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAstronomicalTargetAngle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSolarZenithAngleAndAzimuthAngle
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAngle
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWLongitude_HW4
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWLatitude_HW5
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTargetAngle_HW17
</UL>

<P><STRONG><a name="[1f3]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryTemp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAstronomicalTargetAngle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSolarZenithAngleAndAzimuthAngle
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAngle
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTargetAngle_HW17
</UL>

<P><STRONG><a name="[1f6]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1fb]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[113]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAstronomicalTargetAngle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSolarZenithAngleAndAzimuthAngle
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWLongitude_HW4
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWLatitude_HW5
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTargetAngle_HW17
</UL>

<P><STRONG><a name="[1f9]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[169]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod
</UL>

<P><STRONG><a name="[1fa]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[168]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[1fc]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1da]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[1fd]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSolarZenithAngleAndAzimuthAngle
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[24c]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[130]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWBackAngle
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectOverCurrent
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[24d]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[11f]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWWSoftLimitAngle2
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWTimeZone2
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWPostSpacing2
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWPVModuleWidth2
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWLongitude2
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWLatitude2
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWEWTracingAccuracy2
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWESoftLimitAngle2
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWBackAngle
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAstronomicalTargetAngle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSolarZenithAngleAndAzimuthAngle
</UL>

<P><STRONG><a name="[1fe]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[201]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryTemp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAstronomicalTargetAngle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSolarZenithAngleAndAzimuthAngle
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAngle
</UL>

<P><STRONG><a name="[1ff]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1f5]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[1f8]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[11e]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWWSoftLimitAngle2
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWTimeZone2
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWPVModuleWidth2
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWLongitude2
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWLatitude2
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWEWTracingAccuracy2
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWESoftLimitAngle2
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWBackAngle
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAstronomicalTargetAngle
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectOverCurrent
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSolarZenithAngleAndAzimuthAngle
</UL>

<P><STRONG><a name="[200]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[1f1]"></a>_drnd</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, drnd.o(x$fpl$drnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rint
</UL>

<P><STRONG><a name="[117]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSolarZenithAngleAndAzimuthAngle
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[202]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWPostSpacing2
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAstronomicalTargetAngle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSolarZenithAngleAndAzimuthAngle
</UL>

<P><STRONG><a name="[204]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryTemp
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWWSoftLimitAngle2
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWTimeZone2
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWPostSpacing2
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWPVModuleWidth2
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWLongitude2
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWLatitude2
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWEWTracingAccuracy2
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWESoftLimitAngle2
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAstronomicalTargetAngle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSolarZenithAngleAndAzimuthAngle
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAngle
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWLongitude_HW4
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWLatitude_HW5
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTargetAngle_HW17
</UL>

<P><STRONG><a name="[205]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCTime
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleMangement
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryTemp
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanMode
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoTrackMode
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoSnowMode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoRainMode
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAIMode
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleCalibrationMode
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMangement
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAstronomicalTargetAngle
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectSoftLimit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSolarZenithAngleAndAzimuthAngle
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acosf
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[207]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[209]"></a>__fpl_fcheck_NaN1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[20f]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[114]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCTime
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorAngleControl
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryVoltage
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryTemp
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryCurrent
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPVStringUpCur
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPVStringDownCur
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPVBuckerVoltage
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorCurrent
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEmergencyVoltage
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAstronomicalTargetAngle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSolarZenithAngleAndAzimuthAngle
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[20b]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[16a]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMotorCurrent
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBatSOCTemp
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBatCurrent
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWLongitude_HW4
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWLatitude_HW5
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTargetAngle_HW17
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RRealAngle_HW23
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[20c]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[126]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWAIRemoteTarget
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPVStringCur
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPVBuckerVoltage
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBatVoltage
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBatSOCTemp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerInit
</UL>

<P><STRONG><a name="[20d]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryVoltage
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryTemp
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryCurrent
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoRainMode
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAngle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSolarZenithAngleAndAzimuthAngle
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWLongitude_HW4
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWLatitude_HW5
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTargetAngle_HW17
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[24e]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[ed]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCTime
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanMode
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoWindMode
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoBatSOCLowMode
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWAIRemoteTarget
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAstronomicalTargetAngle
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3Init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[24f]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[e3]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorAngleControl
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryTemp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryInfo
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeCmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanMode
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoTrackMode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoRainMode
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAIMode
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleCalibrationMode
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWTerrainSlope2
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWProtectCurrent2
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMangement
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAstronomicalTargetAngle
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectSoftLimit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectOverCurrent
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectMotorReverseAngleNoChange
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectEmergencyStop
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSolarZenithAngleAndAzimuthAngle
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryCharacterB7030
</UL>

<P><STRONG><a name="[20e]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[212]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[fb]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorAngleControl
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryVoltage
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryTemp
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryCurrent
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPVStringCur
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPVBuckerVoltage
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMotorCurrent
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBatVoltage
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBatSOCTemp
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBatCurrent
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPVStringUpCur
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPVStringDownCur
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPVBuckerVoltage
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorCurrent
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEmergencyVoltage
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAstronomicalTargetAngle
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectOverCurrent
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSolarZenithAngleAndAzimuthAngle
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerInit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryCharacterB7030
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAngle
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWLongitude_HW4
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWLatitude_HW5
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTargetAngle_HW17
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RRealAngle_HW23
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acosf
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[210]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[206]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>

<P><STRONG><a name="[1f4]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[e4]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorAngleControl
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mod
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryTemp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryInfo
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeCmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanMode
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoTrackMode
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoSnowMode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoRainMode
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAIMode
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleCalibrationMode
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWTerrainSlope2
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWProtectCurrent2
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RWPostSpacing2
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMangement
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAstronomicalTargetAngle
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectSoftLimit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectOverCurrent
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectMotorReverseAngleNoChange
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSolarZenithAngleAndAzimuthAngle
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryCharacterB7030
</UL>

<P><STRONG><a name="[211]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[1ef]"></a>_frnd</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, frnd.o(x$fpl$frnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[11d]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryTemp
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSolarZenithAngleAndAzimuthAngle
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acosf
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[213]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[1f2]"></a>_fsqrt</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, fsqrt.o(x$fpl$fsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorAngleControl
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanMode
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoTrackMode
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoSnowMode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoRainMode
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAIMode
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleCalibrationMode
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMangement
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPVStringUpCur
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPVStringDownCur
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorCurrent
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAstronomicalTargetAngle
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectSoftLimit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectMotorReverseAngleNoChange
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSolarZenithAngleAndAzimuthAngle
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerInit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryCharacterB7030
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAngle
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acosf
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[215]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[20a]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>

<P><STRONG><a name="[1e8]"></a>__ARM_scalbnf</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, scalbnf.o(x$fpl$scalbnf))
<BR><BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acosf
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[216]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1b7]"></a>OS_TickListUpdateDly</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, os_tick.o(i.OS_TickListUpdateDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = OS_TickListUpdateDly &rArr; OS_RdyListInsert &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
</UL>

<P><STRONG><a name="[1b8]"></a>OS_TickListUpdateTimeout</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, os_tick.o(i.OS_TickListUpdateTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TickListUpdateTimeout &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
</UL>

<P><STRONG><a name="[105]"></a>CPU_IntDisMeasMaxCalc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cpu_core.o(i.CPU_IntDisMeasMaxCalc))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurGet
</UL>

<P><STRONG><a name="[b0]"></a>AngleMangement</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, main.o(i.AngleMangement))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = AngleMangement &rArr; GetAngle &rArr; CalcAngle &rArr; KalmanFilter &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAngle
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleSensorInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[b8]"></a>Astronomy</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.Astronomy))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = Astronomy &rArr; CalcSolarZenithAngleAndAzimuthAngle &rArr; Mod &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAstronomicalTargetAngle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSolarZenithAngleAndAzimuthAngle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[b9]"></a>LedIWDG</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, main.o(i.LedIWDG))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = LedIWDG &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDTurnOn
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDTurnOff
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDFlash
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[b3]"></a>ModbusOverLoRa</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, main.o(i.ModbusOverLoRa))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = ModbusOverLoRa &rArr; ModbusPortInit &rArr; UART4Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolInit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolAnalysis
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusSend
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRead
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusPortInit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaModulePowerOn
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaModulePowerOff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[b7]"></a>MotorAngleControl</STRONG> (Thumb, 738 bytes, Stack size 8 bytes, main.o(i.MotorAngleControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MotorAngleControl &rArr; OSFlagPost &rArr; OS_FlagPost &rArr; OS_FlagTaskRdy &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorTurnWest
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorTurnEast
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorAllStop
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorRunningState
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorDirState
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[b5]"></a>MotorProtection</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.MotorProtection))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = MotorProtection &rArr; DetectMotorReverseAngleNoChange &rArr; OSFlagPost &rArr; OS_FlagPost &rArr; OS_FlagTaskRdy &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectSoftLimit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectOverCurrent
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectMotorReverseAngleNoChange
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectEmergencyStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[af]"></a>ParameterSave</STRONG> (Thumb, 382 bytes, Stack size 8 bytes, main.o(i.ParameterSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ParameterSave &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteWorkModeToFlash
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteNewSystemToFlash
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteIAPFlagToFlash
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfigParaToFlash
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWorkModeFromFlash
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadConfigParaFromFlash
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseNewSystemFlash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[b2]"></a>PowerManagement</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.PowerManagement))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = PowerManagement &rArr; PowerMangement &rArr; OSFlagPend &rArr; OS_FlagBlock &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMangement
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[b4]"></a>RTCTime</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, main.o(i.RTCTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = RTCTime &rArr; SetTime &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPReadRTCUpdateFlag
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[b1]"></a>Sampling</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, main.o(i.Sampling))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Sampling &rArr; ADCInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMPSensorInit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTMP
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPVStringUpCur
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPVStringDownCur
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPVBuckerVoltage
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotorCurrent
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEmergencyVoltage
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCConvert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[b6]"></a>WorkmodeControl</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i.WorkmodeControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = WorkmodeControl &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkModeMg
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkModeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1bc]"></a>ConfigParaInit</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, init.o(i.ConfigParaInit))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaInit
</UL>

<P><STRONG><a name="[13c]"></a>FixedParaInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, init.o(i.FixedParaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FixedParaInit &rArr; HDVInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDVInit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHardwareVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaInit
</UL>

<P><STRONG><a name="[55]"></a>RAzimuthAngle1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, asprotocol.o(i.RAzimuthAngle1))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[56]"></a>RAzimuthAngle2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, asprotocol.o(i.RAzimuthAngle2))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[74]"></a>RBatCurrent</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, asprotocol.o(i.RBatCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RBatCurrent &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[72]"></a>RBatSOCTemp</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, asprotocol.o(i.RBatSOCTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RBatSOCTemp &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[71]"></a>RBatState</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, asprotocol.o(i.RBatState))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[73]"></a>RBatVoltage</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, asprotocol.o(i.RBatVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RBatVoltage &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[4c]"></a>RDeviceEdition</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, asprotocol.o(i.RDeviceEdition))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[51]"></a>RDeviceType</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, asprotocol.o(i.RDeviceType))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[53]"></a>RElevationAngle1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, asprotocol.o(i.RElevationAngle1))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[54]"></a>RElevationAngle2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, asprotocol.o(i.RElevationAngle2))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[65]"></a>RMotorCurrent</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, asprotocol.o(i.RMotorCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RMotorCurrent &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[70]"></a>RPVBuckerVoltage</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, asprotocol.o(i.RPVBuckerVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RPVBuckerVoltage &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[63]"></a>RPVStringCur</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, asprotocol.o(i.RPVStringCur))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RPVStringCur &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[59]"></a>RRealAngle1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, asprotocol.o(i.RRealAngle1))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[5a]"></a>RRealAngle2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, asprotocol.o(i.RRealAngle2))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[57]"></a>RTargetAngle1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, asprotocol.o(i.RTargetAngle1))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[58]"></a>RTargetAngle2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, asprotocol.o(i.RTargetAngle2))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[64]"></a>RTemp</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, asprotocol.o(i.RTemp))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[62]"></a>RWAIRemoteTarget</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, asprotocol.o(i.RWAIRemoteTarget))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RWAIRemoteTarget &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[87]"></a>RWBackAngle</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, asprotocol.o(i.RWBackAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RWBackAngle &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[52]"></a>RWChannelEnable</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, asprotocol.o(i.RWChannelEnable))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[77]"></a>RWCleaningDockAngle</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, asprotocol.o(i.RWCleaningDockAngle))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[75]"></a>RWComID</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, asprotocol.o(i.RWComID))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[83]"></a>RWESoftLimitAngle1</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, asprotocol.o(i.RWESoftLimitAngle1))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[84]"></a>RWESoftLimitAngle2</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, asprotocol.o(i.RWESoftLimitAngle2))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RWESoftLimitAngle2 &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[6e]"></a>RWEWTracingAccuracy1</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, asprotocol.o(i.RWEWTracingAccuracy1))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[6f]"></a>RWEWTracingAccuracy2</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, asprotocol.o(i.RWEWTracingAccuracy2))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RWEWTracingAccuracy2 &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[88]"></a>RWEWindProtectionAngle</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, asprotocol.o(i.RWEWindProtectionAngle))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[6a]"></a>RWLatitude1</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, asprotocol.o(i.RWLatitude1))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[6b]"></a>RWLatitude2</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, asprotocol.o(i.RWLatitude2))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RWLatitude2 &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[68]"></a>RWLongitude1</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, asprotocol.o(i.RWLongitude1))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[69]"></a>RWLongitude2</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, asprotocol.o(i.RWLongitude2))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RWLongitude2 &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[82]"></a>RWLowStopTime</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, asprotocol.o(i.RWLowStopTime))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[81]"></a>RWLowWindSpeed</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, asprotocol.o(i.RWLowWindSpeed))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[78]"></a>RWMotorOrientation</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, asprotocol.o(i.RWMotorOrientation))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[79]"></a>RWPVModuleWidth1</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, asprotocol.o(i.RWPVModuleWidth1))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[7a]"></a>RWPVModuleWidth2</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, asprotocol.o(i.RWPVModuleWidth2))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RWPVModuleWidth2 &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[7b]"></a>RWPostSpacing1</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, asprotocol.o(i.RWPostSpacing1))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[7c]"></a>RWPostSpacing2</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, asprotocol.o(i.RWPostSpacing2))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RWPostSpacing2 &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[76]"></a>RWPowerMode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, asprotocol.o(i.RWPowerMode))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[66]"></a>RWProtectCurrent1</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, asprotocol.o(i.RWProtectCurrent1))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[67]"></a>RWProtectCurrent2</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, asprotocol.o(i.RWProtectCurrent2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RWProtectCurrent2 &rArr; __aeabi_cfcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[61]"></a>RWRemoteWindSpeed</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, asprotocol.o(i.RWRemoteWindSpeed))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[7d]"></a>RWTerrainSlope1</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, asprotocol.o(i.RWTerrainSlope1))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[7e]"></a>RWTerrainSlope2</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, asprotocol.o(i.RWTerrainSlope2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RWTerrainSlope2 &rArr; __aeabi_cfcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[5d]"></a>RWTimeDay</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, asprotocol.o(i.RWTimeDay))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[5e]"></a>RWTimeHour</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, asprotocol.o(i.RWTimeHour))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[5f]"></a>RWTimeMinute</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, asprotocol.o(i.RWTimeMinute))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[5c]"></a>RWTimeMonth</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, asprotocol.o(i.RWTimeMonth))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[60]"></a>RWTimeSecond</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, asprotocol.o(i.RWTimeSecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RWTimeSecond &rArr; BKPWriteRTCUpdateFlag &rArr; BKP_WriteBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPWriteRTCUpdateFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[5b]"></a>RWTimeYear</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, asprotocol.o(i.RWTimeYear))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[6c]"></a>RWTimeZone1</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, asprotocol.o(i.RWTimeZone1))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[6d]"></a>RWTimeZone2</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, asprotocol.o(i.RWTimeZone2))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RWTimeZone2 &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[80]"></a>RWUpStartTime</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, asprotocol.o(i.RWUpStartTime))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[7f]"></a>RWUpWindSpeed</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, asprotocol.o(i.RWUpWindSpeed))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[85]"></a>RWWSoftLimitAngle1</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, asprotocol.o(i.RWWSoftLimitAngle1))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[86]"></a>RWWSoftLimitAngle2</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, asprotocol.o(i.RWWSoftLimitAngle2))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RWWSoftLimitAngle2 &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[89]"></a>RWWWindProtectionAngle</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, asprotocol.o(i.RWWWindProtectionAngle))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[4d]"></a>RWWorkMode1</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, asprotocol.o(i.RWWorkMode1))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[4e]"></a>RWWorkMode2</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, asprotocol.o(i.RWWorkMode2))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[4f]"></a>RWarningAndFault1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, asprotocol.o(i.RWarningAndFault1))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[50]"></a>RWarningAndFault2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, asprotocol.o(i.RWarningAndFault2))
<BR>[Address Reference Count : 1]<UL><LI> asprotocol.o(i.ASProtocolInit)
</UL>
<P><STRONG><a name="[a9]"></a>AngleCalibrationMode</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, workmodemanager.o(i.AngleCalibrationMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AngleCalibrationMode &rArr; __aeabi_cfcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> workmodemanager.o(i.IdelMode)
</UL>
<P><STRONG><a name="[8e]"></a>AutoAIMode</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, workmodemanager.o(i.AutoAIMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AutoAIMode &rArr; __aeabi_cfcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> workmodemanager.o(i.AutoModeSwitch)
</UL>
<P><STRONG><a name="[8d]"></a>AutoBatSOCLowMode</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, workmodemanager.o(i.AutoBatSOCLowMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AutoBatSOCLowMode
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> workmodemanager.o(i.AutoModeSwitch)
</UL>
<P><STRONG><a name="[a6]"></a>AutoMode</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, workmodemanager.o(i.AutoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AutoMode
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindCheck
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatSOCLowCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> workmodemanager.o(i.IdelMode)
</UL>
<P><STRONG><a name="[8b]"></a>AutoModeSwitch</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, workmodemanager.o(i.AutoModeSwitch))
<BR>[Address Reference Count : 7]<UL><LI> workmodemanager.o(i.WorkModeInit)
<LI> workmodemanager.o(i.AutoAIMode)
<LI> workmodemanager.o(i.AutoBatSOCLowMode)
<LI> workmodemanager.o(i.AutoRainMode)
<LI> workmodemanager.o(i.AutoSnowMode)
<LI> workmodemanager.o(i.AutoTrackMode)
<LI> workmodemanager.o(i.AutoWindMode)
</UL>
<P><STRONG><a name="[8f]"></a>AutoRainMode</STRONG> (Thumb, 500 bytes, Stack size 8 bytes, workmodemanager.o(i.AutoRainMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AutoRainMode &rArr; __aeabi_cfcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> workmodemanager.o(i.AutoModeSwitch)
</UL>
<P><STRONG><a name="[90]"></a>AutoSnowMode</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, workmodemanager.o(i.AutoSnowMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AutoSnowMode &rArr; __aeabi_fsub
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> workmodemanager.o(i.AutoModeSwitch)
</UL>
<P><STRONG><a name="[91]"></a>AutoTrackMode</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, workmodemanager.o(i.AutoTrackMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AutoTrackMode &rArr; __aeabi_cfcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> workmodemanager.o(i.AutoModeSwitch)
</UL>
<P><STRONG><a name="[8c]"></a>AutoWindMode</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, workmodemanager.o(i.AutoWindMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AutoWindMode
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> workmodemanager.o(i.AutoModeSwitch)
</UL>
<P><STRONG><a name="[ef]"></a>BatSOCLowCheck</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, workmodemanager.o(i.BatSOCLowCheck))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoMode
</UL>

<P><STRONG><a name="[aa]"></a>CleanMode</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, workmodemanager.o(i.CleanMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CleanMode &rArr; __aeabi_cfcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> workmodemanager.o(i.IdelMode)
</UL>
<P><STRONG><a name="[8a]"></a>IdelMode</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, workmodemanager.o(i.IdelMode))
<BR>[Address Reference Count : 7]<UL><LI> workmodemanager.o(i.MaintenanceMode)
<LI> workmodemanager.o(i.ManualMode)
<LI> workmodemanager.o(i.WorkModeInit)
<LI> workmodemanager.o(i.AngleCalibrationMode)
<LI> workmodemanager.o(i.AutoMode)
<LI> workmodemanager.o(i.AutoModeSwitch)
<LI> workmodemanager.o(i.CleanMode)
</UL>
<P><STRONG><a name="[a8]"></a>MaintenanceMode</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, workmodemanager.o(i.MaintenanceMode))
<BR>[Address Reference Count : 1]<UL><LI> workmodemanager.o(i.IdelMode)
</UL>
<P><STRONG><a name="[a7]"></a>ManualMode</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, workmodemanager.o(i.ManualMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ManualMode &rArr; __aeabi_fsub
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> workmodemanager.o(i.IdelMode)
</UL>
<P><STRONG><a name="[ee]"></a>WindCheck</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, workmodemanager.o(i.WindCheck))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoMode
</UL>

<P><STRONG><a name="[120]"></a>ChargeCmd</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, powermanagement.o(i.ChargeCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ChargeCmd &rArr; ChargerSuspend &rArr; IICWrite &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatingCmd
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerSuspend
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerReset
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerActive
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMangement
</UL>

<P><STRONG><a name="[142]"></a>GetBatteryInfo</STRONG> (Thumb, 428 bytes, Stack size 8 bytes, powermanagement.o(i.GetBatteryInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GetBatteryInfo &rArr; GetBatteryTemp &rArr; IICRead &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryVoltage
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryTemp
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatterySOC
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryCurrent
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryChargerState
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMangement
</UL>

<P><STRONG><a name="[111]"></a>GetDayOfYear</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, astronomicalalgorithms.o(i.GetDayOfYear))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetDayOfYear
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSolarZenithAngleAndAzimuthAngle
</UL>

<P><STRONG><a name="[116]"></a>Mod</STRONG> (Thumb, 304 bytes, Stack size 72 bytes, astronomicalalgorithms.o(i.Mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Mod &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rint
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSolarZenithAngleAndAzimuthAngle
</UL>

<P><STRONG><a name="[9b]"></a>HWNULL</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hwprotocol.o(i.HWNULL))
<BR>[Address Reference Count : 1]<UL><LI> hwprotocol.o(i.HWProtocolInit)
</UL>
<P><STRONG><a name="[93]"></a>RDeviceEdition1_HW0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hwprotocol.o(i.RDeviceEdition1_HW0))
<BR>[Address Reference Count : 1]<UL><LI> hwprotocol.o(i.HWProtocolInit)
</UL>
<P><STRONG><a name="[94]"></a>RDeviceEdition2_HW1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hwprotocol.o(i.RDeviceEdition2_HW1))
<BR>[Address Reference Count : 1]<UL><LI> hwprotocol.o(i.HWProtocolInit)
</UL>
<P><STRONG><a name="[95]"></a>RDeviceType_HW2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hwprotocol.o(i.RDeviceType_HW2))
<BR>[Address Reference Count : 1]<UL><LI> hwprotocol.o(i.HWProtocolInit)
</UL>
<P><STRONG><a name="[a5]"></a>RRealAngle_HW23</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hwprotocol.o(i.RRealAngle_HW23))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RRealAngle_HW23 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwprotocol.o(i.HWProtocolInit)
</UL>
<P><STRONG><a name="[a2]"></a>RTargetAngle_HW17</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, hwprotocol.o(i.RTargetAngle_HW17))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RTargetAngle_HW17 &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwprotocol.o(i.HWProtocolInit)
</UL>
<P><STRONG><a name="[98]"></a>RWLatitude_HW5</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, hwprotocol.o(i.RWLatitude_HW5))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RWLatitude_HW5 &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwprotocol.o(i.HWProtocolInit)
</UL>
<P><STRONG><a name="[97]"></a>RWLongitude_HW4</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, hwprotocol.o(i.RWLongitude_HW4))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RWLongitude_HW4 &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwprotocol.o(i.HWProtocolInit)
</UL>
<P><STRONG><a name="[96]"></a>RWNum_HW3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hwprotocol.o(i.RWNum_HW3))
<BR>[Address Reference Count : 1]<UL><LI> hwprotocol.o(i.HWProtocolInit)
</UL>
<P><STRONG><a name="[9a]"></a>RWRemoteWindSpeed_HW7</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hwprotocol.o(i.RWRemoteWindSpeed_HW7))
<BR>[Address Reference Count : 1]<UL><LI> hwprotocol.o(i.HWProtocolInit)
</UL>
<P><STRONG><a name="[9e]"></a>RWTimeDay_HW12</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hwprotocol.o(i.RWTimeDay_HW12))
<BR>[Address Reference Count : 1]<UL><LI> hwprotocol.o(i.HWProtocolInit)
</UL>
<P><STRONG><a name="[9f]"></a>RWTimeHour_HW13</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hwprotocol.o(i.RWTimeHour_HW13))
<BR>[Address Reference Count : 1]<UL><LI> hwprotocol.o(i.HWProtocolInit)
</UL>
<P><STRONG><a name="[a0]"></a>RWTimeMinute_HW14</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hwprotocol.o(i.RWTimeMinute_HW14))
<BR>[Address Reference Count : 1]<UL><LI> hwprotocol.o(i.HWProtocolInit)
</UL>
<P><STRONG><a name="[9d]"></a>RWTimeMonth_HW11</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hwprotocol.o(i.RWTimeMonth_HW11))
<BR>[Address Reference Count : 1]<UL><LI> hwprotocol.o(i.HWProtocolInit)
</UL>
<P><STRONG><a name="[a1]"></a>RWTimeSecond_HW15</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hwprotocol.o(i.RWTimeSecond_HW15))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RWTimeSecond_HW15 &rArr; BKPWriteRTCUpdateFlag &rArr; BKP_WriteBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPWriteRTCUpdateFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwprotocol.o(i.HWProtocolInit)
</UL>
<P><STRONG><a name="[9c]"></a>RWTimeYear_HW10</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hwprotocol.o(i.RWTimeYear_HW10))
<BR>[Address Reference Count : 1]<UL><LI> hwprotocol.o(i.HWProtocolInit)
</UL>
<P><STRONG><a name="[99]"></a>RWWorkMode_HW6</STRONG> (Thumb, 198 bytes, Stack size 0 bytes, hwprotocol.o(i.RWWorkMode_HW6))
<BR>[Address Reference Count : 1]<UL><LI> hwprotocol.o(i.HWProtocolInit)
</UL>
<P><STRONG><a name="[a3]"></a>RWarningAndFault1_HW20</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hwprotocol.o(i.RWarningAndFault1_HW20))
<BR>[Address Reference Count : 1]<UL><LI> hwprotocol.o(i.HWProtocolInit)
</UL>
<P><STRONG><a name="[a4]"></a>RWarningAndFault2_HW21</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hwprotocol.o(i.RWarningAndFault2_HW21))
<BR>[Address Reference Count : 1]<UL><LI> hwprotocol.o(i.HWProtocolInit)
</UL>
<P><STRONG><a name="[10a]"></a>CalcAngle</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, anglesensorhal.o(i.CalcAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CalcAngle &rArr; KalmanFilter &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAngle
</UL>

<P><STRONG><a name="[110]"></a>KalmanFilter</STRONG> (Thumb, 480 bytes, Stack size 48 bytes, anglesensorhal.o(i.KalmanFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = KalmanFilter &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAngle
</UL>

<P><STRONG><a name="[e9]"></a>LSM6DS3Init</STRONG> (Thumb, 480 bytes, Stack size 24 bytes, anglesensorhal.o(i.LSM6DS3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LSM6DS3Init &rArr; WriteRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRegister
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRegister
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleSensorInit
</UL>

<P><STRONG><a name="[ea]"></a>ReadRegister</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, anglesensorhal.o(i.ReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAngle
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleSensorInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3Init
</UL>

<P><STRONG><a name="[e8]"></a>SPI1Init</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, anglesensorhal.o(i.SPI1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI1Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CalculateCRC
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleSensorInit
</UL>

<P><STRONG><a name="[164]"></a>WriteRegister</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, anglesensorhal.o(i.WriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WriteRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3Init
</UL>

<P><STRONG><a name="[92]"></a>BatteryCharacterB7030</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, batterypower.o(i.BatteryCharacterB7030))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BatteryCharacterB7030 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> batterypower.o(i.BatteryPowerInit)
</UL>
<P><STRONG><a name="[ff]"></a>BatteryTypeIOInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, batterypower.o(i.BatteryTypeIOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BatteryTypeIOInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryPowerInit
</UL>

<P><STRONG><a name="[101]"></a>ChargerInit</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, batterypower.o(i.ChargerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ChargerInit &rArr; IICWrite &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWrite
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryPowerInit
</UL>

<P><STRONG><a name="[100]"></a>GetBatteryType</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, batterypower.o(i.GetBatteryType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetBatteryType
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryPowerInit
</UL>

<P><STRONG><a name="[fd]"></a>HeatingInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, batterypower.o(i.HeatingInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HeatingInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryPowerInit
</UL>

<P><STRONG><a name="[174]"></a>MotorEN</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, motorcontrol.o(i.MotorEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MotorEN
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorAllStop
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[17a]"></a>MotorEW</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, motorcontrol.o(i.MotorEW))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MotorEW
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorTurnWest
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorTurnEast
</UL>

<P><STRONG><a name="[17b]"></a>MotorIOInit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, motorcontrol.o(i.MotorIOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MotorIOInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorInit
</UL>

<P><STRONG><a name="[17c]"></a>TIM3Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, motorcontrol.o(i.TIM3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM3Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetAutoreload
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorInit
</UL>

<P><STRONG><a name="[17d]"></a>TimerStart</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, motorcontrol.o(i.TimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorTurnWest
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorTurnEast
</UL>

<P><STRONG><a name="[173]"></a>TimerStop</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, motorcontrol.o(i.TimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimerStop
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorAllStop
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[171]"></a>CRC16Check</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, modbusframehal.o(i.CRC16Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CRC16Check
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusSend
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRead
</UL>

<P><STRONG><a name="[ab]"></a>DMA2C5Send</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, modbusframehal.o(i.DMA2C5Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2C5Send
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbusframehal.o(i.ModbusPortInit)
</UL>
<P><STRONG><a name="[170]"></a>UART4Init</STRONG> (Thumb, 340 bytes, Stack size 72 bytes, modbusframehal.o(i.UART4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = UART4Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusPortInit
</UL>

<P><STRONG><a name="[1cd]"></a>ScanLastWorkModeAddr</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, flashstoragehal.o(i.ScanLastWorkModeAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ScanLastWorkModeAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteWorkModeToFlash
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadWorkModeFromFlash
</UL>

<P><STRONG><a name="[14f]"></a>DelayUs</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtc.o(i.DelayUs))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
</UL>

<P><STRONG><a name="[1dc]"></a>TMP75Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tmpsensor.o(i.TMP75Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TMP75Init &rArr; IICWriteByte &rArr; IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMPSensorInit
</UL>

<P><STRONG><a name="[150]"></a>IICGetACK</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, iicbsp.o(i.IICGetACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IICGetACK
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWrite
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICRead
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWriteByte
</UL>

<P><STRONG><a name="[151]"></a>IICGetOneByte</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, iicbsp.o(i.IICGetOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IICGetOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICRead
</UL>

<P><STRONG><a name="[153]"></a>IICSendOneByte</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, iicbsp.o(i.IICSendOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IICSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWrite
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICRead
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWriteByte
</UL>

<P><STRONG><a name="[154]"></a>IICSetACK</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, iicbsp.o(i.IICSetACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IICSetACK
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICRead
</UL>

<P><STRONG><a name="[155]"></a>IICSetNACK</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, iicbsp.o(i.IICSetNACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IICSetNACK
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICRead
</UL>

<P><STRONG><a name="[152]"></a>IICStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, iicbsp.o(i.IICStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IICStart
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWrite
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICRead
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWriteByte
</UL>

<P><STRONG><a name="[156]"></a>IICStop</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, iicbsp.o(i.IICStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IICStop
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWrite
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICRead
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWriteByte
</UL>

<P><STRONG><a name="[1d1]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1d2]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[203]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[1f7]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[214]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[208]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
